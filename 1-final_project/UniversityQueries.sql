-- MySQL Script generated by MySQL Workbench
-- Tue Jul  6 16:09:24 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema university_data
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema university_data
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `universitydata` DEFAULT CHARACTER SET utf8 ;
USE `universitydata` ;

-- -----------------------------------------------------
-- Table `university_data`.`college`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`college` (
  `college_id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`college_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`department` (
  `department_id` INT NOT NULL,
  `department_name` VARCHAR(45) NOT NULL,
  `department_code` VARCHAR(45) NOT NULL,
  `college_id` INT NOT NULL,
  PRIMARY KEY (`department_id`),
  INDEX `fk_department_college_idx` (`college_id` ASC) VISIBLE,
  CONSTRAINT `fk_department_college`
    FOREIGN KEY (`college_id`)
    REFERENCES `universitydata`.`college` (`college_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`course` (
  `course_num` INT NOT NULL,
  `course_name` VARCHAR(45) NOT NULL,
  `credits` INT NOT NULL,
  `department_id` INT NOT NULL,
  PRIMARY KEY (`course_num`),
  INDEX `fk_course_department_idx` (`department_id` ASC) VISIBLE,
  CONSTRAINT `fk_course_department`
    FOREIGN KEY (`department_id`)
    REFERENCES `universitydata`.`department` (`department_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`faculty`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`faculty` (
  `faculty_id` INT NOT NULL,
  `faculty_fname` VARCHAR(45) NOT NULL,
  `faculty_lname` VARCHAR(45) NOT NULL,
  `department_id` INT NOT NULL,
  PRIMARY KEY (`faculty_id`),
  INDEX `fk_faculty_department_idx` (`department_id` ASC) VISIBLE,
  CONSTRAINT `fk_faculty_department`
    FOREIGN KEY (`department_id`)
    REFERENCES `universitydata`.`department` (`department_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`term`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`term` (
  `term_id` INT NOT NULL,
  `term` ENUM('Fall', 'Winter') NOT NULL,
  `year` YEAR NOT NULL,
  PRIMARY KEY (`term_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`section` (
  `section_id` INT NOT NULL,
  `section_num` INT NOT NULL,
  `section_capacity` INT NOT NULL,
  `course_num` INT NOT NULL,
  `term_id` INT NOT NULL,
  `faculty_id` INT NOT NULL,
  PRIMARY KEY (`section_id`),
  INDEX `fk_section_course_idx` (`course_num` ASC) VISIBLE,
  INDEX `fk_section_term_idx` (`term_id` ASC) VISIBLE,
  INDEX `fk_section_faculty_idx` (`faculty_id` ASC) VISIBLE,
  CONSTRAINT `fk_section_course`
    FOREIGN KEY (`course_num`)
    REFERENCES `universitydata`.`course` (`course_num`),
  CONSTRAINT `fk_section_faculty`
    FOREIGN KEY (`faculty_id`)
    REFERENCES `universitydata`.`faculty` (`faculty_id`),
  CONSTRAINT `fk_section_term`
    FOREIGN KEY (`term_id`)
    REFERENCES `universitydata`.`term` (`term_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`student` (
  `student_id` INT NOT NULL,
  `fname` VARCHAR(45) NOT NULL,
  `lname` VARCHAR(45) NOT NULL,
  `gender` ENUM('M', 'F') NOT NULL,
  `city` VARCHAR(45) NOT NULL,
  `state` CHAR(2) NOT NULL,
  `dob` DATE NOT NULL,
  PRIMARY KEY (`student_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


-- -----------------------------------------------------
-- Table `university_data`.`section_has_student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `universitydata`.`section_has_student` (
  `section_id` INT NOT NULL,
  `student_id` INT NOT NULL,
  PRIMARY KEY (`section_id`, `student_id`),
  INDEX `fk_section_has_student_idx` (`student_id` ASC) VISIBLE,
  INDEX `fk_section_has_student1_idx` (`section_id` ASC) VISIBLE,
  CONSTRAINT `fk_section_has_student`
    FOREIGN KEY (`student_id`)
    REFERENCES `universitydata`.`student` (`student_id`),
  CONSTRAINT `fk_section_has_student_section`
    FOREIGN KEY (`section_id`)
    REFERENCES `universitydata`.`section` (`section_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


INSERT INTO college VALUES
(1,'College of Physical Science and Engineering'),
(2,'College of Business and Communication'),
(3,'College of Language and Letters');

INSERT INTO department VALUES
(10,'Computer Iinformation Technology','CIT',1),
(11,'Economics','ECON',2),
(12,'Economics','ECON',2),
(13,'Humanities and Philosophy','HUM',3);

INSERT INTO course VALUES
(111,'Intro to Databases',3,10),
(388,'Econometrics',4,11),
(150,'Micro Economics',3,12),
(376,'Classical Heritage',2,13);

INSERT INTO faculty VALUES
(1001,'Marty','Morring',10),
(1002,'Nate','Nathan',12),
(1003,'Nate','Nathan',12),
(1004,'Ben','Barrus',11),
(1005,'John','Jensen',13),
(1006,'Marty','Morring',10),
(1007,'Bill','Barney',10),
(1008,'Nate','Nathan',12),
(1009,'Nate','Nathan',12),
(1010,'John','Jensen',13);

INSERT INTO term VALUES
(1,'Fall',2019),
(2,'Fall',2019),
(3,'Fall',2019),
(4,'Fall',2019),
(5,'Fall',2019),
(6,'Winter',2018),
(7,'Winter',2018),
(8,'Winter',2018),
(9,'Winter',2018),
(10,'Winter',2018);

INSERT INTO section VALUES
(50,1,30,111,1,1001),
(51,1,50,150,2,1002),
(52,2,50,150,3,1003),
(53,1,35,388,4,1004),
(54,1,30,376,5,1005),
(55,2,30,111,6,1006),
(56,3,35,111,7,1007),
(57,1,50,150,8,1008),
(58,2,50,150,9,1009),
(59,1,50,376,10,1010);

INSERT INTO student VALUES
(576,'Paul','Miller','M','Dallas','TX','1996-02-22'),
(577,'Katie','Smith','F','Provo','UT','1995-07-22'),
(578,'Kelly','Jones','F','Provo','UT','1998-06-22'),
(579,'Devon','Merrill','M','Mesa','AZ','2000-07-22'),
(580,'Mandy','Murdock','F','Topeka','KS','1996-11-22'),
(581,'Alece','Adams','F','Rigby','ID','1997-05-22'),
(582,'Bryce','Carlson','M','Bozeman','MT','1997-11-22'),
(583,'Preston','Lasen','M','Decatur','TN','1996-09-22'),
(584,'Julia','Madsen','F','Rexburg','ID','1998-09-22'),
(585,'Susan','Sorensen','F','Mesa','AZ','1998-08-09');

INSERT INTO section_has_student VALUES
(56,581),
(55,582),
(57,582),
(59,582),
(54,579),
(58,584),
(53,577),
(53,578),
(53,580),
(54,580),
(50,576),
(52,576),
(58,583),
(55,585);

-- 1--
SELECT fname, lname, date_format(dob, '%M %e, %Y') AS 'Sept Birthdays'
FROM student
WHERE MONTHNAME(dob) = 'September';

-- 02 -- 
SELECT 
    lname,
    fname,
    (YEAR('2017-01-05') - YEAR(dob)) AS Years,
    ((TO_DAYS('2017-01-05') - TO_DAYS(dob)) % 365) AS days,
    CONCAT((YEAR('2017-01-05') - YEAR(dob)), '-Yrs, ',((TO_DAYS('2017-01-05') - TO_DAYS(dob)) % 365), '-Days') AS 'Years and Days'
FROM
    student
ORDER BY dob;

-- 03 --
SELECT fname, lname
FROM student s 
INNER JOIN section_has_student shs 
	  ON s.student_id = shs.student_id
INNER JOIN section sc 
      ON shs.section_id = sc.section_id
INNER JOIN faculty f 
      ON sc.faculty_id = f.faculty_id
WHERE faculty_fname = 'John' AND faculty_lname = 'Jensen'
ORDER BY lname;

-- 04 --
SELECT faculty_fname AS fname, faculty_lname AS lname
FROM faculty f 
INNER JOIN section sc
      ON f.faculty_id = sc.faculty_id
INNER JOIN section_has_student shs
      ON sc.section_id = shs.section_id
INNER JOIN student s 
      ON shs.student_id = s.student_id
INNER JOIN term t 
      ON sc.term_id = t.term_id
WHERE fname = 'Bryce' AND term = 'Winter'
ORDER BY faculty_lname;

-- 05 --
SELECT DISTINCT fname, lname
FROM student s
INNER JOIN section_has_student shs 
      ON s.student_id = shs.student_id
INNER JOIN section sc
      ON shs.section_id = sc.section_id
INNER JOIN course c 
      ON sc.course_num = c.course_num
INNER JOIN term t 
      ON sc.term_id = t.term_id
WHERE course_name = 'Econometrics'
AND term = 'Fall'
AND year = 2019
ORDER BY lname;

-- 06 --
SELECT department_code, course_num,  course_name AS name
FROM department d 
INNER JOIN course c 
      ON d.department_id = c.department_id
INNER JOIN section sc 
      ON c.course_num = sc.course_num 
INNER JOIN term t 
      ON sc.term_id = t.term_id
INNER JOIN section_has_student shs 
      ON sc.section_id = shs.section_id
INNER JOIN student s 
      ON shs.student_id = s.student_id
WHERE fname = 'Bryce'
AND term = 'Winter'
AND year = '2018';

-- 07 --
SELECT term, year, COUNT(fname) AS Enrollment
FROM term t
INNER JOIN section sc 
	ON t.term_id = sc.term_id
INNER JOIN section_has_student shs 
    ON sc.section_id = shs.section_id
INNER JOIN student s 
    ON shs.student_id = s.student_id
WHERE term = 'Fall'
AND year = 2019;

-- 08 --
SELECT name AS college, COUNT(course_num) AS Courses
FROM college c 
INNER JOIN department d 
      ON c.college_id = d.college_id
INNER JOIN course cs 
      ON d.department_id = cs.department_id
GROUP BY college 
ORDER BY college;

-- 09 --
SELECT faculty_fname AS fname, faculty_lname AS lname, (section_capacity) AS TeachingCapacity
FROM faculty f 
INNER JOIN section sc 
    ON f.faculty_id = sc.faculty_id
INNER JOIN term t 
    ON sc.term_id = t.term_id
INNER JOIN section_has_student shs 
    ON sc.section_id = shs.section_id
INNER JOIN student s 
    ON shs.student_id = s.student_id
WHERE (term = 'Winter' AND year = 2018)
GROUP BY faculty_lname
ORDER BY TeachingCapacity;

-- 10 --
SELECT lname, fname, SUM(credits) AS Credits
FROM student s 
INNER JOIN section_has_student shs
     ON s.student_id = shs.student_id
INNER JOIN section sc 
     ON shs.section_id = sc.section_id
INNER JOIN term t
     ON sc.term_id = t.term_id
INNER JOIN course c 
     ON sc.course_num = c.course_num 
WHERE term = 'Fall' AND year = 2019
GROUP BY fname
HAVING Credits > 3
ORDER BY credits DESC;


